// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ErrorCode.
const (
	InputError     ErrorCode = "input_error"
	RecordNotFound ErrorCode = "record_not_found"
)

// Defines values for HostStatus.
const (
	Offline HostStatus = "offline"
	Online  HostStatus = "online"
)

// Defines values for VirtualMachineStatus.
const (
	VirtualMachineStatusCreating  VirtualMachineStatus = "creating"
	VirtualMachineStatusDeleting  VirtualMachineStatus = "deleting"
	VirtualMachineStatusRunning   VirtualMachineStatus = "running"
	VirtualMachineStatusStopped   VirtualMachineStatus = "stopped"
	VirtualMachineStatusSuspended VirtualMachineStatus = "suspended"
	VirtualMachineStatusUpdating  VirtualMachineStatus = "updating"
)

// Defines values for VolumeStatus.
const (
	VolumeStatusAvailable VolumeStatus = "available"
	VolumeStatusCreating  VolumeStatus = "creating"
	VolumeStatusDeleting  VolumeStatus = "deleting"
	VolumeStatusInUse     VolumeStatus = "in_use"
)

// Error defines model for Error.
type Error struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

// ErrorCode defines model for Error.Code.
type ErrorCode string

// Host defines model for Host.
type Host struct {
	Id     *int32      `json:"id,omitempty"`
	Name   *string     `json:"name,omitempty"`
	Object *string     `json:"object,omitempty"`
	Status *HostStatus `json:"status,omitempty"`
}

// HostStatus defines model for Host.Status.
type HostStatus string

// HostCollection defines model for HostCollection.
type HostCollection struct {
	Data    *[]Host `json:"data,omitempty"`
	HasMore *bool   `json:"has_more,omitempty"`
	Object  *string `json:"object,omitempty"`
}

// NetworkInterface defines model for NetworkInterface.
type NetworkInterface struct {
	Dhcp      *bool   `json:"dhcp,omitempty"`
	Id        *int32  `json:"id,omitempty"`
	IpAddress *string `json:"ip_address,omitempty"`
	Object    *string `json:"object,omitempty"`
}

// VirtualMachine defines model for VirtualMachine.
type VirtualMachine struct {
	Cores       *int32                `json:"cores,omitempty"`
	Host        *Host                 `json:"host,omitempty"`
	Id          *int32                `json:"id,omitempty"`
	MemoryBytes *int64                `json:"memory_bytes,omitempty"`
	Name        *string               `json:"name,omitempty"`
	Nic         *NetworkInterface     `json:"nic,omitempty"`
	Object      *string               `json:"object,omitempty"`
	RootVolume  *Volume               `json:"root_volume,omitempty"`
	Status      *VirtualMachineStatus `json:"status,omitempty"`
	Vmi         *VirtualMachineImage  `json:"vmi,omitempty"`
}

// VirtualMachineStatus defines model for VirtualMachine.Status.
type VirtualMachineStatus string

// VirtualMachineImage defines model for VirtualMachineImage.
type VirtualMachineImage struct {
	Id     *int32  `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
	Object *string `json:"object,omitempty"`
}

// VirtualMachineImageCollection defines model for VirtualMachineImageCollection.
type VirtualMachineImageCollection struct {
	Data    *[]VirtualMachineImage `json:"data,omitempty"`
	HasMore *bool                  `json:"has_more,omitempty"`
	Object  *string                `json:"object,omitempty"`
}

// Volume defines model for Volume.
type Volume struct {
	Id        *int32        `json:"id,omitempty"`
	Name      *string       `json:"name,omitempty"`
	Object    *string       `json:"object,omitempty"`
	SizeBytes *int64        `json:"size_bytes,omitempty"`
	Status    *VolumeStatus `json:"status,omitempty"`
}

// VolumeStatus defines model for Volume.Status.
type VolumeStatus string

// CreateProxmoxHostJSONBody defines parameters for CreateProxmoxHost.
type CreateProxmoxHostJSONBody struct {
	IpAddress   string  `json:"ip_address"`
	Name        string  `json:"name"`
	SshPassword *string `json:"ssh_password,omitempty"`
	SshUsername *string `json:"ssh_username,omitempty"`
}

// CreateProxmoxVmiJSONBody defines parameters for CreateProxmoxVmi.
type CreateProxmoxVmiJSONBody struct {
	Name   string `json:"name"`
	Sha256 string `json:"sha256"`
	Url    string `json:"url"`
}

// CreateVmJSONBody defines parameters for CreateVm.
type CreateVmJSONBody struct {
	Cores                   int32   `json:"cores"`
	HostId                  *int32  `json:"host_id,omitempty"`
	MemoryMegabytes         int32   `json:"memory_megabytes"`
	Name                    string  `json:"name"`
	RootVolumeSizeGigabytes int32   `json:"root_volume_size_gigabytes"`
	SshKey                  *string `json:"ssh_key,omitempty"`
	UserData                *string `json:"user_data,omitempty"`
	VmiId                   int32   `json:"vmi_id"`
}

// UpdateVmJSONBody defines parameters for UpdateVm.
type UpdateVmJSONBody struct {
	Cores           *int32  `json:"cores,omitempty"`
	MemoryMegabytes *int32  `json:"memory_megabytes,omitempty"`
	UserData        *string `json:"user_data,omitempty"`
}

// CreateProxmoxHostJSONRequestBody defines body for CreateProxmoxHost for application/json ContentType.
type CreateProxmoxHostJSONRequestBody CreateProxmoxHostJSONBody

// CreateProxmoxVmiJSONRequestBody defines body for CreateProxmoxVmi for application/json ContentType.
type CreateProxmoxVmiJSONRequestBody CreateProxmoxVmiJSONBody

// CreateVmJSONRequestBody defines body for CreateVm for application/json ContentType.
type CreateVmJSONRequestBody CreateVmJSONBody

// UpdateVmJSONRequestBody defines body for UpdateVm for application/json ContentType.
type UpdateVmJSONRequestBody UpdateVmJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListHosts request
	ListHosts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProxmoxHostWithBody request with any body
	CreateProxmoxHostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProxmoxHost(ctx context.Context, body CreateProxmoxHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListVmis request
	ListVmis(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProxmoxVmiWithBody request with any body
	CreateProxmoxVmiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProxmoxVmi(ctx context.Context, body CreateProxmoxVmiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVmWithBody request with any body
	CreateVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVm(ctx context.Context, body CreateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVm request
	DeleteVm(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVm request
	GetVm(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateVmWithBody request with any body
	UpdateVmWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateVm(ctx context.Context, id int32, body UpdateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RebootVm request
	RebootVm(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartVm request
	StartVm(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopVm request
	StopVm(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListHosts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListHostsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProxmoxHostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProxmoxHostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProxmoxHost(ctx context.Context, body CreateProxmoxHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProxmoxHostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListVmis(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListVmisRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProxmoxVmiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProxmoxVmiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProxmoxVmi(ctx context.Context, body CreateProxmoxVmiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProxmoxVmiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVm(ctx context.Context, body CreateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVm(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVmRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVm(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVmRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVmWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVmRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVm(ctx context.Context, id int32, body UpdateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVmRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RebootVm(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRebootVmRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartVm(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartVmRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopVm(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopVmRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListHostsRequest generates requests for ListHosts
func NewListHostsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/hosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProxmoxHostRequest calls the generic CreateProxmoxHost builder with application/json body
func NewCreateProxmoxHostRequest(server string, body CreateProxmoxHostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProxmoxHostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProxmoxHostRequestWithBody generates requests for CreateProxmoxHost with any type of body
func NewCreateProxmoxHostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/hosts/proxmox")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListVmisRequest generates requests for ListVmis
func NewListVmisRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vmis")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProxmoxVmiRequest calls the generic CreateProxmoxVmi builder with application/json body
func NewCreateProxmoxVmiRequest(server string, body CreateProxmoxVmiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProxmoxVmiRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProxmoxVmiRequestWithBody generates requests for CreateProxmoxVmi with any type of body
func NewCreateProxmoxVmiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vmis/proxmox")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateVmRequest calls the generic CreateVm builder with application/json body
func NewCreateVmRequest(server string, body CreateVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVmRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVmRequestWithBody generates requests for CreateVm with any type of body
func NewCreateVmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVmRequest generates requests for DeleteVm
func NewDeleteVmRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVmRequest generates requests for GetVm
func NewGetVmRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateVmRequest calls the generic UpdateVm builder with application/json body
func NewUpdateVmRequest(server string, id int32, body UpdateVmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateVmRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateVmRequestWithBody generates requests for UpdateVm with any type of body
func NewUpdateVmRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRebootVmRequest generates requests for RebootVm
func NewRebootVmRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vms/%s/reboot", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartVmRequest generates requests for StartVm
func NewStartVmRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vms/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopVmRequest generates requests for StopVm
func NewStopVmRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vms/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListHostsWithResponse request
	ListHostsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListHostsResponse, error)

	// CreateProxmoxHostWithBodyWithResponse request with any body
	CreateProxmoxHostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProxmoxHostResponse, error)

	CreateProxmoxHostWithResponse(ctx context.Context, body CreateProxmoxHostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProxmoxHostResponse, error)

	// ListVmisWithResponse request
	ListVmisWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListVmisResponse, error)

	// CreateProxmoxVmiWithBodyWithResponse request with any body
	CreateProxmoxVmiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProxmoxVmiResponse, error)

	CreateProxmoxVmiWithResponse(ctx context.Context, body CreateProxmoxVmiJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProxmoxVmiResponse, error)

	// CreateVmWithBodyWithResponse request with any body
	CreateVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVmResponse, error)

	CreateVmWithResponse(ctx context.Context, body CreateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVmResponse, error)

	// DeleteVmWithResponse request
	DeleteVmWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteVmResponse, error)

	// GetVmWithResponse request
	GetVmWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetVmResponse, error)

	// UpdateVmWithBodyWithResponse request with any body
	UpdateVmWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVmResponse, error)

	UpdateVmWithResponse(ctx context.Context, id int32, body UpdateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVmResponse, error)

	// RebootVmWithResponse request
	RebootVmWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*RebootVmResponse, error)

	// StartVmWithResponse request
	StartVmWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*StartVmResponse, error)

	// StopVmWithResponse request
	StopVmWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*StopVmResponse, error)
}

type ListHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostCollection
}

// Status returns HTTPResponse.Status
func (r ListHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProxmoxHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Host
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r CreateProxmoxHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProxmoxHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListVmisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VirtualMachineImageCollection
}

// Status returns HTTPResponse.Status
func (r ListVmisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListVmisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProxmoxVmiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *VirtualMachineImage
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r CreateProxmoxVmiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProxmoxVmiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *VirtualMachine
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r CreateVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VirtualMachine
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VirtualMachine
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RebootVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VirtualMachine
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r RebootVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RebootVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VirtualMachine
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r StartVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopVmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VirtualMachine
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r StopVmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopVmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListHostsWithResponse request returning *ListHostsResponse
func (c *ClientWithResponses) ListHostsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListHostsResponse, error) {
	rsp, err := c.ListHosts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListHostsResponse(rsp)
}

// CreateProxmoxHostWithBodyWithResponse request with arbitrary body returning *CreateProxmoxHostResponse
func (c *ClientWithResponses) CreateProxmoxHostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProxmoxHostResponse, error) {
	rsp, err := c.CreateProxmoxHostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProxmoxHostResponse(rsp)
}

func (c *ClientWithResponses) CreateProxmoxHostWithResponse(ctx context.Context, body CreateProxmoxHostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProxmoxHostResponse, error) {
	rsp, err := c.CreateProxmoxHost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProxmoxHostResponse(rsp)
}

// ListVmisWithResponse request returning *ListVmisResponse
func (c *ClientWithResponses) ListVmisWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListVmisResponse, error) {
	rsp, err := c.ListVmis(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListVmisResponse(rsp)
}

// CreateProxmoxVmiWithBodyWithResponse request with arbitrary body returning *CreateProxmoxVmiResponse
func (c *ClientWithResponses) CreateProxmoxVmiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProxmoxVmiResponse, error) {
	rsp, err := c.CreateProxmoxVmiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProxmoxVmiResponse(rsp)
}

func (c *ClientWithResponses) CreateProxmoxVmiWithResponse(ctx context.Context, body CreateProxmoxVmiJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProxmoxVmiResponse, error) {
	rsp, err := c.CreateProxmoxVmi(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProxmoxVmiResponse(rsp)
}

// CreateVmWithBodyWithResponse request with arbitrary body returning *CreateVmResponse
func (c *ClientWithResponses) CreateVmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVmResponse, error) {
	rsp, err := c.CreateVmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVmResponse(rsp)
}

func (c *ClientWithResponses) CreateVmWithResponse(ctx context.Context, body CreateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVmResponse, error) {
	rsp, err := c.CreateVm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVmResponse(rsp)
}

// DeleteVmWithResponse request returning *DeleteVmResponse
func (c *ClientWithResponses) DeleteVmWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteVmResponse, error) {
	rsp, err := c.DeleteVm(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVmResponse(rsp)
}

// GetVmWithResponse request returning *GetVmResponse
func (c *ClientWithResponses) GetVmWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetVmResponse, error) {
	rsp, err := c.GetVm(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVmResponse(rsp)
}

// UpdateVmWithBodyWithResponse request with arbitrary body returning *UpdateVmResponse
func (c *ClientWithResponses) UpdateVmWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVmResponse, error) {
	rsp, err := c.UpdateVmWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVmResponse(rsp)
}

func (c *ClientWithResponses) UpdateVmWithResponse(ctx context.Context, id int32, body UpdateVmJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVmResponse, error) {
	rsp, err := c.UpdateVm(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVmResponse(rsp)
}

// RebootVmWithResponse request returning *RebootVmResponse
func (c *ClientWithResponses) RebootVmWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*RebootVmResponse, error) {
	rsp, err := c.RebootVm(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRebootVmResponse(rsp)
}

// StartVmWithResponse request returning *StartVmResponse
func (c *ClientWithResponses) StartVmWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*StartVmResponse, error) {
	rsp, err := c.StartVm(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartVmResponse(rsp)
}

// StopVmWithResponse request returning *StopVmResponse
func (c *ClientWithResponses) StopVmWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*StopVmResponse, error) {
	rsp, err := c.StopVm(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopVmResponse(rsp)
}

// ParseListHostsResponse parses an HTTP response from a ListHostsWithResponse call
func ParseListHostsResponse(rsp *http.Response) (*ListHostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateProxmoxHostResponse parses an HTTP response from a CreateProxmoxHostWithResponse call
func ParseCreateProxmoxHostResponse(rsp *http.Response) (*CreateProxmoxHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProxmoxHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseListVmisResponse parses an HTTP response from a ListVmisWithResponse call
func ParseListVmisResponse(rsp *http.Response) (*ListVmisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListVmisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VirtualMachineImageCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateProxmoxVmiResponse parses an HTTP response from a CreateProxmoxVmiWithResponse call
func ParseCreateProxmoxVmiResponse(rsp *http.Response) (*CreateProxmoxVmiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProxmoxVmiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest VirtualMachineImage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateVmResponse parses an HTTP response from a CreateVmWithResponse call
func ParseCreateVmResponse(rsp *http.Response) (*CreateVmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest VirtualMachine
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteVmResponse parses an HTTP response from a DeleteVmWithResponse call
func ParseDeleteVmResponse(rsp *http.Response) (*DeleteVmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetVmResponse parses an HTTP response from a GetVmWithResponse call
func ParseGetVmResponse(rsp *http.Response) (*GetVmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VirtualMachine
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateVmResponse parses an HTTP response from a UpdateVmWithResponse call
func ParseUpdateVmResponse(rsp *http.Response) (*UpdateVmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VirtualMachine
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRebootVmResponse parses an HTTP response from a RebootVmWithResponse call
func ParseRebootVmResponse(rsp *http.Response) (*RebootVmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RebootVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VirtualMachine
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseStartVmResponse parses an HTTP response from a StartVmWithResponse call
func ParseStartVmResponse(rsp *http.Response) (*StartVmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VirtualMachine
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseStopVmResponse parses an HTTP response from a StopVmWithResponse call
func ParseStopVmResponse(rsp *http.Response) (*StopVmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopVmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VirtualMachine
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
