openapi: 3.1.0
info:
  title: Crunchloop Cloud Management API
  description: API for managing Crunchloop Cloud resources
  version: 0.0.1
  contact:
    name: Crunchloop
    email: os@crunchloop.io
servers:
  - url: https://cloud.crunchloop.io
tags:
  - name: Vm
    description: Operations related to virtual machines
  - name: Vmi
    description: Operations related to virtual machine images
  - name: Host
    description: Operations related to hosts
paths:
  /api/v1/vms:
    post:
      summary: Create a new virtual machine
      description: Create a new virtual machine
      operationId: createVm
      tags: [Vm]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: swagger-vm
                host_id:
                  type: integer
                  format: int32
                  example: 10
                vmi_id:
                  type: integer
                  format: int32
                  example: 20
                cores:
                  type: integer
                  format: int32
                  example: 1
                  minimum: 1
                  maximum: 2
                memory_megabytes:
                  type: integer
                  format: int32
                  example: 1024
                  minimum: 128
                  maximum: 1024
                root_volume_size_gigabytes:
                  type: integer
                  format: int32
                  example: 10
                  minimum: 5
                  maximum: 50
                ssh_key:
                  type: string
                  example: ssh-rsa AAAAB3NzaC1y....
                user_data:
                  type: string
              required:
                - name
                - vmi_id
                - cores
                - memory_megabytes
                - root_volume_size_gigabytes
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachine'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/vms/{id}:
    get:
      summary: Get virtual machine
      description: Get a virtual machine by ID
      operationId: getVm
      tags: [Vm]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachine'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update virtual machine
      description: Update a virtual machine by ID
      operationId: updateVm
      tags: [Vm]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cores:
                  type: integer
                  format: int32
                  example: 1
                  minimum: 1
                  maximum: 2
                memory_megabytes:
                  type: integer
                  format: int32
                  example: 1024
                  minimum: 128
                  maximum: 1024
                user_data:
                  type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachine'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a virtual machine
      description: Delete a virtual machine by ID
      operationId: deleteVm
      tags: [Vm]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/vms/{id}/start:
    post:
      summary: Start a virtual machine
      description: Start a virtual machine by ID
      operationId: startVm
      tags: [Vm]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachine'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/vms/{id}/stop:
    post:
      summary: Stop a virtual machine
      description: Stop a virtual machine by ID
      operationId: stopVm
      tags: [Vm]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachine'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/vms/{id}/reboot:
    post:
      summary: Reboot a virtual machine
      description: Reboot a virtual machine by ID
      operationId: rebootVm
      tags: [Vm]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachine'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/hosts:
    get:
      summary: List hosts
      description: List all hosts
      operationId: listHosts
      tags: [Host]
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostCollection'
  /api/v1/hosts/proxmox:
    post:
      summary: Create a new Proxmox host
      description: Create a new Proxmox machine
      operationId: createProxmoxHost
      tags: [Host]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: beelink-01
                ip_address:
                  type: string
                  example: '127.0.0.1'
                ssh_username:
                  type: string
                  example: root
                ssh_password:
                  type: string
                  example: "secretpassword"
              required:
                - name
                - ip_address
                - username
                - password
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/vmis/proxmox:
    post:
      summary: Create a new Proxmox virutal machine image
      description: Create a new Proxmox virtual machine image
      operationId: createProxmoxVmi
      tags: [Vmi]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: ubuntu-jammy-server-amd64-20241002
                url:
                  type: string
                  example: 'https://cloud-images.ubuntu.com/jammy/20241002/jammy-server-cloudimg-amd64.img'
                sha256:
                  type: string
                  example: 55c687a9a242fab7b0ec89ac69f9def77696c4e160e6f640879a0b0031a08318
              required:
                - name
                - url
                - sha256
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachineImage'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/vmis:
    get:
      summary: List virtual machine images
      description: List all virtual machine images
      operationId: listVmis
      tags: [Vmi]
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachineImageCollection'
components:
  schemas:
    VirtualMachine:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        object:
          type: string
          const: vm
        name:
          type: string
          example: swagger-vm
        status:
          type: string
          example: running
          enum:
            - stopped
            - creating
            - updating
            - running
            - suspended
            - deleting
        cores:
          type: integer
          format: int32
          example: 1
        memory_bytes:
          type: integer
          format: int64
          example: 1073741824
        vmi:
          $ref: '#/components/schemas/VirtualMachineImage'
        host:
          $ref: '#/components/schemas/Host'
        root_volume:
          $ref: '#/components/schemas/Volume'
        nic:
          $ref: '#/components/schemas/NetworkInterface'
    Host:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        object:
          type: string
          const: host
        name:
          type: string
          example: swagger-host
        status:
          type: string
          enum:
            - online
            - offline
          example: online
    VirtualMachineImage:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        object:
          type: string
          const: vmi
        name:
          type: string
          exameple: ubuntu
    Volume:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        object:
          type: string
          const: volume
        name:
          type: string
          example: swagger-vol
        size_bytes:
          type: integer
          format: int64
          example: 10737418240
        status:
          type: string
          enum:
           - creating
           - in_use
           - available
           - deleting
          example: in_use
    NetworkInterface:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        object:
          type: string
          const: nic
        dhcp:
          type: boolean
          example: true
        ip_address:
          type: string
          example: 192.168.1.2
    HostCollection:
      type: object
      properties:
        object:
          type: string
          const: list
        has_more:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Host'
    VirtualMachineImageCollection:
      type: object
      properties:
        object:
          type: string
          const: list
        has_more:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/VirtualMachineImage'
    Error:
      type: object
      properties:
        code:
          type: string
          enum:
            - record_not_found
            - input_error
          example: record_not_found
        message:
          type: string
      required:
        - code
        - message